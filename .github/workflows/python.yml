# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "master" ]
    # paths:
    #   - "**.py"
    #   - "pyproject.toml"
    #   - "poetry.lock"
    #   - ".github/**"
  pull_request:
    branches: [ "master" ]
    # paths:
    #   - "**.py"
    #   - "pyproject.toml"
    #   - "poetry.lock"
    #   - ".github/**"
  schedule:
    - cron: '59 23 * * 3' # Every Wednesday at 23:59
  workflow_dispatch:      # Allows you to manually trigger the workflow

env:
  PYTHON_CODE_DIR: my_app

permissions:
  contents: read

jobs:
  analysis:
    name: Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pylint bandit
        if [ -f ${{ env.PYTHON_CODE_DIR }}/tests/requirements.txt ]; then pip install -r ${{ env.PYTHON_CODE_DIR }}/tests/requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    # To decide which linter to use, refer to: https://trunk.io/learn/comparing-ruff-flake8-and-pylint-linting-speed
    # - name: Lint with pylint
    #   run: |
    #     pylint $(git ls-files '*.py')

    - name: Test with pytest
      run: |
        pytest ${{ env.PYTHON_CODE_DIR }}/tests --junitxml=junit/test-results-${{ matrix.python-version }}.xml 

    - name: Upload pytest test results xml
      uses: actions/upload-artifact@v4
      if: ${{ always() }}
      with:
        name: pytest-results-xml-${{ matrix.python-version }}
        path: junit/test-results-${{ matrix.python-version }}.xml

    # For reference regarding -ii -l..., read: https://pypi.org/project/bandit/1.6.3/
    - name: Vulnerability scanning with bandit
      run: bandit -l -ii -r ${{ env.PYTHON_CODE_DIR }} -f json -o bandit-report-${{ matrix.python-version }}.json

    - name: Upload bandit scan artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-findings-${{ matrix.python-version }}
        path: bandit-report-${{ matrix.python-version }}.json
