# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to an existing Amazon ECS, when there is a push to the "master" branch.

name: Deploy to Amazon ECS

on:
  pull_request:
    branches:
      - master
    paths:
      - 'my_app/**'   # Only trigger when changes are made in the 'my_app' directory. Can't pass a .env variable here
  workflow_dispatch:  # Allows you to manually trigger the workflow

env:
  TF_WORKING_DIR: infra
  APP_DOCKER_WORKING_DIR: my_app

permissions:
  contents: read

jobs:
  deploy:
    name: Update container image in AWS ECS
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4     # This is an action that checks out your repository onto the runner, allowing you to run scripts or other actions against your code (such as build and test tools). You should use the checkout action any time your workflow will use the repository's code.

    - name: Get Terraform Outputs
      uses: ./.github/actions/get-terraform-outputs
      with:
        outputs_of_interest: "region ecr_repository_name ecs_service_name ecs_cluster_name task_arn ecs_container_name"
        tf_working_dir: ${{ env.TF_WORKING_DIR }}

    - name: Map Terraform Outputs to Environment Variables
      run: |
        echo "AWS_REGION=${{ env.region }}" >> $GITHUB_ENV
        echo "ECR_REPOSITORY=${{ env.ecr_repository_name }}" >> $GITHUB_ENV
        echo "ECS_SERVICE=${{ env.ecs_service_name }}" >> $GITHUB_ENV
        echo "ECS_CLUSTER=${{ env.ecs_cluster_name }}" >> $GITHUB_ENV
        echo "ECS_TASK_DEFINITION=${{ env.task_arn }}" >> $GITHUB_ENV
        echo "CONTAINER_NAME=${{ env.ecs_container_name }}" >> $GITHUB_ENV

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}  # Built-in GitHub Actions variable that holds the commit SHA for the event that triggered the workflow. It will provide a unique tag for the Docker image, allowing it to be specifically tied to this particular commit in the repository.
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        cd ${{ env.APP_DOCKER_WORKING_DIR }}
        docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition-arn: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
